import psutil
import time
import os

def get_current_traffic():
    """获取当前的网络流量"""
    net_io = psutil.net_io_counters()
    return net_io.bytes_recv

def get_current_connections():
    """获取当前的网络连接数"""
    return len(psutil.net_connections(kind='inet'))

def block_new_ips():
    """阻止所有新的IP连接"""
    os.system(f'netsh advfirewall firewall add rule name="BlockAllInbound" dir=in action=block')

def unblock_new_ips():
    """允许所有新的IP连接"""
    os.system(f'netsh advfirewall firewall delete rule name="BlockAllInbound"')

def block_ports(ports):
    """阻止指定的端口列表"""
    for port in ports:
        os.system(f'netsh advfirewall firewall add rule name="BlockPort{port}" dir=in action=block protocol=TCP localport={port}')

def unblock_ports(ports):
    """解除对指定端口列表的阻止"""
    for port in ports:
        os.system(f'netsh advfirewall firewall delete rule name="BlockPort{port}"')

def main():
    try:
        # 用户输入设置
        THRESHOLD_TRAFFIC = float(input("请输入流量阈值 (例如：1 表示1MB)：")) * 1024 * 1024
        THRESHOLD_CONNECTIONS = int(input("请输入连接数阈值 (例如：350)："))
        CHECK_INTERVAL = int(input("请输入检查间隔时间 (秒)："))
        PORTS_TO_BLOCK = list(map(int, input("请输入要阻止的端口列表，使用逗号分隔 (例如：8080,8081,8082)：").split(',')))
        
    except ValueError:
        print("输入无效，请确保输入正确的数字格式。")
        return

    BLOCKED = False
    prev_traffic = get_current_traffic()

    while True:
        time.sleep(CHECK_INTERVAL)
        current_traffic = get_current_traffic()
        traffic_diff = current_traffic - prev_traffic
        prev_traffic = current_traffic

        current_connections = get_current_connections()

        # 实时显示输入的流量大小 (以MB/s为单位) 和当前连接数
        print(f"Current traffic input: {traffic_diff / (1024 * 1024):.2f} MB/s, Current connections: {current_connections}")

        if (traffic_diff > THRESHOLD_TRAFFIC or current_connections > THRESHOLD_CONNECTIONS) and not BLOCKED:
            print("High traffic or connection count detected! Blocking new IPs and specified ports...")
            block_new_ips()
            block_ports(PORTS_TO_BLOCK)
            BLOCKED = True
        elif traffic_diff <= THRESHOLD_TRAFFIC and current_connections <= THRESHOLD_CONNECTIONS and BLOCKED:
            print("Traffic and connection count are back to normal. Unblocking...")
            unblock_new_ips()
            unblock_ports(PORTS_TO_BLOCK)
            BLOCKED = False

if __name__ == "__main__":
    main()
